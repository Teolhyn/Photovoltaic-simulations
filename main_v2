import pandas as pd

import numpy as np

from tqdm import tqdm

import time

import matplotlib.pyplot as plt
import matplotlib.dates as mdates

from multiprocessing import Pool

# pvlib imports
import pvlib

from pvlib.pvsystem import PVSystem, FixedMount

from pvlib.location import Location

from pvlib.modelchain import ModelChain

from pvlib.temperature import TEMPERATURE_MODEL_PARAMETERS

# For optimization
start_time = time.time()

# TODO: Correct functionality, now it is just adding complexity
def solar_model(ghi : int = 1050, 
                dni : int = 1000, 
                dhi : int = 100, 
                temp_air : int = 30, 
                wind_speed : int = 5, 
                surface_azimuth : int = 180, 
                surface_tilt : int = 30, 
                dt = '20170401 1200-0700'):
    
    # Helps in optimizing
    model_start_time = time.time()

    temperature_model_parameters = TEMPERATURE_MODEL_PARAMETERS['sapm']['open_rack_glass_glass']

    # load some module and inverter specifications
    sandia_modules = pvlib.pvsystem.retrieve_sam('SandiaMod')

    cec_inverters = pvlib.pvsystem.retrieve_sam('cecinverter')

    sandia_module = sandia_modules['Canadian_Solar_CS5P_220M___2009_']

    cec_inverter = cec_inverters['ABB__MICRO_0_25_I_OUTD_US_208__208V_']


    # Create Location object, a Mount object, a PVSystem object, and a ModelChain object
    location = Location(latitude=32.2, longitude=-110.9)

    system = PVSystem(surface_tilt=surface_tilt, surface_azimuth=surface_azimuth,
                      module_parameters=sandia_module,
                      inverter_parameters=cec_inverter,
                      temperature_model_parameters=temperature_model_parameters)
    
    mc = ModelChain(system, location)


    # Weather data
    weather = pd.DataFrame([[ghi, dni, dhi, temp_air, wind_speed]],
                           columns=['ghi', 'dni', 'dhi', 'temp_air', 'wind_speed'],
                           index=[pd.Timestamp(dt)])
    

    # Run the model
    mc.run_model(weather)

    model_end_time = time.time()
    # Temporary
    # print("Model took", (model_end_time - model_start_time), "s to complete!")
    return mc.results.ac


def run(data):
    power_result = []
    timepoints = []

    print(data)
    print(type(data))
    for row in data:

        ac = (solar_model(ghi=data['GHI'], dni=data['DNI'], dhi=data['DHI'], temp_air=data['Tamb'],
                         wind_speed=data['WS'], surface_azimuth=180, surface_tilt=20, dt=data['dt']))
        
        if ac.iloc[0] < 0:
            ac.iloc[0] = 0

        power_result.append(ac.iloc[0])
        timepoints.append(ac.keys()[0])

    return power_result, timepoints


if __name__ == '__main__':
    # Surface_azimuth (N=0, E=90, S=180, W=270)
    # solar_model(ghi=1000, dni=800, temp_air=20, surface_azimuth=270, surface_tilt=30)

    weather_data = pd.read_csv('IrrData2019_StarkeDFC_230704.csv')

    pool = Pool(4)
    power_result, timepoints = tqdm(pool.imap(run, weather_data.to_dict(orient='records')))

        # print("Loop took", (loop_end_time - loop_start_time), "s to complete!")

    plt.plot(timepoints, power_result)
    plt.show()